опция для CMAKe  
-DGOAL="arm"

/linux-devkit/sysroots/i686-arago-linux/usr/bin/qt5/qmqke
/usr/local/bin/mkimage 

gdbserver: /usr/bin/gdbserver

//нужно создать папку sysroot/lib   перекопировать туда lib из файловой системы
выполнить на хост машине :
(gdb) set sysroot /sysroot  



http://processors.wiki.ti.com/index.php/Sitara_SDK_6.00.00_Release_Notes
http://arago-project.org/git/projects/?p=linux-am33x.git;a=shortlog;h=refs/heads/AM335XPSP_04.06.00.08
http://comments.gmane.org/gmane.linux.embedded.yocto.meta-ti/1966
http://www.stlinux.com/u-boot/mkimage/ramdisk-images


//Ссылки на образы Ядра которые я использую.
git clone git://rocketboards.org/linux-socfpga.git
git clone git://github.com/beagleboard/kernel.git && cd kernel

Linux socfpga_cyclone5 3.10.31-ltsi-02861-g801a40f
Linux version 3.10.31-ltsi-02861-g801a40f (ubuntu@ip-172-31-31-150) (gcc version 4.8.3 20131202 (prerelease) (Linaro GCC 4.8-2013.12) )

The Angstrom Distribution socfpga_cyclone5 ttyS0
Angstrom v2013.12 - Kernel 3.10.31-ltsi-02861-g801a40f

-------------запихнул linux 10.37 всё ok
Linux version 3.10.37-ltsi-rt37 (root@linux-akqm) (gcc version 4.9.2 20140904 (prerelease) (crosstool-NG linaro-1.13.1-4.9-2014.09 - Linaro GCC 4.9-2014.09) ) 

linux-socfpga-refs_tags_rel_socfpga-3.10-ltsi-rt_16.02.02_pr.tar.gz
https://github.com/altera-opensource/linux-socfpga/tree/socfpga-3.10-ltsi-rt
linux-socfpga-rel_socfpga-3.14_14.06.02.tar.gz


Linux version 3.14.26-g2489c02 (gtbldadm@ubuntu-12) (gcc version 4.7.3 20130226 (prerelease) (crosstool-NG linaro-1.13.1-4.7-2013.03-20130313 - Linaro GCC 2013.03) ) #1 Fri Apr 10 14:59:04 EDT 2015
Linux arm_socfpga 3.14.26-g2489c02 #1 Fri Apr 10 14:59:04 EDT 2015 armv7l GNU/Linux
http://processors.wiki.ti.com/index.php/?title=Sitara_Linux_SDK_Release_Notes&oldid=197860
http://downloads.ti.com/sitara_linux/esd/AM335xSDK/latest/index_FDS.html
https://github.com/beagleboard/linux/tree/3.14
https://github.com/RobertCNelson/ti-linux-kernel/tree/ti-linux-3.14.y
http://studyprog.ru/bb_tisdk_qt/  //qt -создание
https://habrahabr.ru/company/rainbow/blog/251053/    //gdb-отладкка
Invalid CPU Type - valid names are: alpha, arm, x86, ia64, m68k, microblaze, mips, mips64, nios, nios2, ppc, s390, sh, sparc, sparc64, blackfin, avr32
./uboot-mkimage -A ppc -O Linux -T RAMDisk -a 0x00000000 -n uboot ext2 ramdisk rootfs -d zImage ramdisk.gz
./uboot-mkimage  -B 4 -A arm -O linux -T multi -C none -a 0x80008000 -e 0x80008000 -n k2x-uclibc/1.0/k21supertel -d rootfs.ext2.gz uimaget.bin
./uboot-mkimage  -B 4 -A arm -O linux -C none -a 0x00000000 -e 0x00000000 -n KOSTA -d rootfs.ext2.gz uImage
./uboot-mkimage  -B 4 -A ppc -O linux -C none -a 0x00000000 -e 0x00000000 -n KOSTA -d rootfs.ext2.gz rootfs.ext2.gz.uboot


creating a uboot ramdisk image: rootfs.ext2.gz.uboot
Image Name:   uboot ext2 ramdisk rootfs
Created:      Thu Jul 31 20:21:56 2014
Image Type:   PowerPC Linux RAMDisk Image (gzip compressed)
Data Size:    4795642 Bytes = 4683.24 kB = 4.57 MB
Load Address: 0x00000000
Entry Point:  0x00000000

Started: Thu Jul 31 20:21:36 2014
Ended:   Thu Jul 31 20:21:57 2014
Elapsed: 21 seconds


//Перед персборкой для другой платформы нужно обязательно делать make mrproper для ядра Linux
socfpga_pelengator2_defconfig
omap2plus_defconfig



//Старт ядра для beagleboneblack нужно понимать что пока только ядро 3.2 так как там есть файл board-am335x.c в новых ядрах нет поэтому
//нужно эксперементировать
//отличаються команды  bootz для  zImage
//                     bootm для  uImage
tftp 82000000    boc/bco/zImage
tftp 88000000    boc/bco/am335x-boneblack.dtb (не нужен для ядра 3.2) пробеум с новыми версиями ядра
tftp 88080000    boc/bco/uRamdisk_initramfs_root

bootz 82000000 88080000  88000000   //если использовать dtb файл
bootz 82000000 88080000             //ядро и файловая система

bootm 80200000 80F80000
ramboot=echo Booting from ramdisk ...; run ramargs; bootz ${loadaddr} ${rdaddr} ${fdtaddr}
bootargs=console=ttyO0,115200n8 root=/dev/ram0 rw rootfstype=ramfs


tftp 82000000 zImage 
tftp 88000000 am335x-boneblack.dtb
tftp 88080000 uRamdisk_initramfs_root



копируем в /usr/local/bin ->   mkimage



tftp 8000        boc/bco/zImage
tftp 100         boc/bco/dtbimage.bin (не нужен для ядра 3.2) пробеум с новыми версиями ядра
tftp 1000000     boc/bco/uRamdisk_initramfs_root

bootz 8000 1000000 100



# CONFIG_SERIAL_OMAP is not set
r

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j2
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bb.org_defconfig
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- uImage dtbs LOADADDR=0x80008000  -j2

/mkimage -l

(root=/dev/mmcblk0p2 rootwait console=ttyO0,115200) Default kernel command string


tftpboot 0x80007FC0 boc/bco/uImage
tftpboot 0x80F80000 boc/bco/am335x-boneblack.dtb
bootm 0x80007FC0 - 0x80F80000


bootargs=console=ttyS2,115200n8 root=/dev/mmcblk0p2 rw rootwait
setenv bootargs=console=ttyO0,115200n8 root=/dev/ram0 rw rootfstype=ext2




scripts/kconfig/mconf Kconfig
.config:20:warning: symbol value '' invalid for PHYS_OFFSET
warning: (SOC_OMAP5 && SOC_DRA7XX) selects ARM_ERRATA_799270 which has unmet direct dependencies (CPU_V7 && SMP)
configuration written to .config






//настройки ethernet
//сервер  ХОСТ-ПК
ifconfig eth0 192.168.130.128 netmask 255.255.255.0 broadcast 192.168.130.255
//Клиент  CycloneV
ifconfig eth0 192.168.130.124 netmask 255.255.255.0 broadcast 192.168.130.255




tftp 0x2000000 boc/bco/preloader-mkpimage.bin
tftp 0x2000000 boc/bco/u-boot.bin
tftp 0x2000000 boc/bco/u-boot.img
tftp 0x2000000 boc/bco/u-boot.img




4. Load the Preloader image from FAT partition into memory, then write it to the QSPI flash # fatload mmc 0:1 0x2000000 preloader-mkpimage.bin
# sf probe 
# sf update 0x2000000 0x00000 $filesize



sf update 0x2000000 0x00000  $filesize
sf update 0x2000000 0x60000  $filesize


sf write 0x2000000 0x60000  $filesize






ping 192.168.130.128
Waiting for PHY auto negotiation to complete. done
ENET Speed is 100 Mbps - FULL duplex connection
Using mii0 device
host 192.168.130.128 is alive


https://habrahabr.ru/post/264515/

ifconfig eth0 192.168.130.128 netmask 255.255.255.0 broadcast 192.168.130.255


///Загрузка работающей версии ядра

## Flattened Device Tree blob at 00000100
   Booting using the fdt blob at 0x00000100
   Loading Device Tree to 03ff7000, end 03fffaa2 ... OK



файлы где грузиться u-boot Starting Kernel..


C:\Share\uboot\u-boot-socfpga\arch\arm\lib\bootm.c
C:\Share\uboot\u-boot-socfpga\common\cmd_bootm.c



qspiramdiskaddr=0x2 000 000
qspiramdiskaddr=0x1 000 000
qspiramdisksize=0x2 800 000


ramnetload=tftp ${rdiskaddr} ${tftpdir}${rdiskimage}


updrdisk=run ramnetload;
sf probe 0:0;
sf update ${rdiskaddr} ${qspiramdiskaddr} 0x1000000;

sf update 0x2000000 0x3000000 0x1000000;
sf update 0x3000000 0x4000000 0x1000000;



updrdisk=run ramnetload; sf probe 0:0; sf update ${rdiskaddr} ${qspiramdiskaddr} 0x1000000; sf update 0x2000000 0x3000000 0x1000000; sf update 0x3000000 0x4000000 0x1000000;


scp main root@192.168.130.124:/mnt/f1p0/


scp main root@192.168.130.124:/mnt/f1p0/

---------------------Название Файловой системы чтобы не менять---------------------
uRamdisk_initramfs_root

tftp 0x2000000 boc/bco/uimage.bin
bootm 0x2000000


//------------------------------------------------------ВАЖНО ДЛЯ загрузки-------------------------------------//
//------------------------------------------------------ВАЖНО ДЛЯ загрузки-------------------------------------//
//------------------------------------------------------ВАЖНО ДЛЯ загрузки-------------------------------------//

Приблизительное описание 
loadaddr  ->адрес ядра           =0x8000
rdiskaddr ->адрес ramdisk
fdtaddr   ->адрес dtb файла
fpgadata  ->адрес fpga rbf




fpgaload=tftp ${fpgadata} ${tftpdir}${fpgaimage}; fpga load 0 ${fpgadata}; run bridge_enable_handoff; 
1.run fpgaload


------------------------------------------------------------------------------------------------------------------------------------------------

qspiload=sf probe ${qspiloadcs};sf read ${loadaddr} ${qspibootimageaddr} ${bootimagesize};sf read ${fdtaddr} ${qspifdtaddr} ${fdtimagesize};
2. run qspiload        (ядро+dtb  из QSPI флэшки )

------------------------------------------------

3.run ramqspiload   (файловая система из QSPI флэшки)
ramqspiload=sf probe ${qspiloadcs}; sf read ${rdiskaddr} ${qspiramdiskaddr} 0x1000000; sf read 0x2000000 0x3000000 0x1000000; sf read 0x3000000 0x4000000 0x1000000; 




3.run ramnetload    (фйловая система из сети)   
ramnetload=tftp ${rdiskaddr} ${tftpdir}${rdiskimage}
----------------------------------------------

4.команда на загрузку
//в конце загружаем
ramboot=setenv bootargs ramdisk_size=140000 mem=1G root=/dev/ram rw rootfstype=ramfs rootwait console=ttyS0,115200 coherent_pool=1M ecc=on ip=${ipaddr}:${serverip}::${netmask}::eth0:off; bootz ${loadaddr} ${rdiskaddr} ${fdtaddr}
run ramboot




///////////////////////////////////////////Создание файловой Системы из набора файлов.rootfs/////////////////////////////////////////////////////

dpkg -i multistrap_2.1.20_all.deb
/home/pelengator/workspace/platform/armhf.sh /home/pelengator/workspace/platform-build/

//Создание файловой системы ramfs
find . -print0 | cpio --null -ov --format=newc | gzip -9 > /home/pelengator/tmp/armhf-main-initramfs.cpio.gz
mkimage  -A arm -T ramdisk -C gzip -n 'Debian Image' -d armhf-main-initramfs.cpio.gz uRamdisk_initramfs_root

!!!!!!!!!!!!!!!!!!!!!!!!!!!/находясь в директории файловой системы!!!!!!!!!!!
ln -s sbin/init init


/home/pelengator/workspace/linux-ltsi

/opt/ti/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux

arm-linux-gnueabihf-

opt/freescale/rootfs/arm/usr/local/   ---
setenv bootargs ramdisk_size=140000 mem=1G root=/dev/ram ro rootfstype=squashfs rootwait console=ttyS0,115200 coherent_pool=1M ecc=on ip=${ipaddr}:${serverip}::${netmask}::eth0:off; bootz ${loadaddr} ${rdiskaddr} ${fdtaddr}
setenv bootargs root=/dev/ram ro rootwait rootfstype=squashfs noinitrd console=ttyS0,115200 coherent_pool=1M ecc=on;ip=${ipaddr}:${serverip}::${netmask}::eth0:off; bootz ${loadaddr} ${rdiskaddr} ${fdtaddr}
setenv bootargs root=/dev/ram ro rootwait rootfstype=squashfs noinitrd console=ttyS0,115200 coherent_pool=1M ecc=on;ip=${ipaddr}:${serverip}::${netmask}::eth0:off; bootz ${loadaddr} ${rdiskaddr} ${fdtaddr}







//Проверка загрузки двух ядер в ядре Linux (вывод в консоль)
Mount-cache hash table entries: 512
CPU: Testing write buffer coherency: ok
ftrace: allocating 16782 entries in 50 pages
CPU0: thread -1, cpu 0, socket 0, mpidr 80000000
Setting up static identity map for 0x80480c58 - 0x80480cb0
CPU1: Booted secondary processor
CPU1: thread -1, cpu 1, socket 0, mpidr 80000001
Brought up 2 CPUs
SMP: Total of 2 processors activated (3188.32 BogoMIPS).
CPU: All CPU(s) started in SVC mode.

-------------------------------------------------------------------------------------------------------------------------------------






sudo /opt/freescale/ltib/usr/bin/rpm --root /home/kosta/ltib-p1020rdb_p2020rdb-20101029/rootfs --dbpath /var/lib/rpm -e --allmatches --nodeps --define '_tmppath /tmp/ltib' libtermcap 2>/dev/null
sudo /opt/freescale/ltib/usr/bin/rpm --root /home/kosta/ltib-p1020rdb_p2020rdb-20101029/rootfs --dbpath /var/lib/rpm --prefix / --ignorearch -ivh --force --excludedocs --define '_tmppath /tmp/ltib' /home/kosta/ltib-p1020rdb_p2020rdb-20101029/rpm/RPMS/arm/libtermcap-2.0.8-31_1.arm.rpm
error: failed dependencies: libc.so.6(GLIBC_2.4)   is needed by libtermcap-2.0.8-3






run ramnetload


//Создание файла Hello Word для Плат.

gcc-linaro-arm-linux-gnueabihf-4.8-2014.04_linux
export PATH=$PATH:/opt/ti/gcc-linaro-arm-linux-gnueabihf-4.8-2014.04_linux/bin
export ARCH=arm
export CROSS_COMPILE=arm-linux-gnueabihf-

arm-linux-gnueabihf-gcc -isystem/opt/ti/gcc-linaro-arm-linux-gnueabihf-4.8-2014.04_linux/usr/include -c main.c	
arm-linux-gnueabihf-gcc main.o -g main 

arm-linux-gnueabihf-gcc main.c -O0 -g -o main
arm-linux-gnueabihf-g++ main.c -O0 -g -o main



/opt/ti/gcc-linaro-arm-linux-gnueabihf-4.8-2014.04_linux/arm-linux-gnueabihf/include/c++/4.8.3







///Параметры Компиляции и Опции компилятора.

https://gcc.gnu.org/onlinedocs/gcc/ARM-Options.html
'-mcpu=' are: arm1020e arm1020t arm1022e arm1026ej-s arm10e arm10tdmi arm1136j-s arm1136jf-s arm1156t2-s 
arm1156t2f-s arm1176jz-s arm1176jzf-s arm2 arm250 arm3 arm6 arm60 arm600 arm610 arm620 arm7 arm70 arm700 
arm700i arm710 arm7100 arm710c arm710t arm720 arm720t arm740t arm7500 arm7500fe arm7d arm7di arm7dm arm7dmi 
arm7m arm7tdmi arm7tdmi-s arm8 arm810 arm9 arm920 arm920t arm922t arm926ej-s arm940t arm946e-s arm966e-s arm968e-s 
arm9e arm9tdmi cortex-a15 cortex-a5 cortex-a53 cortex-a7 cortex-a8 cortex-a9 cortex-m0 cortex-m0plus cortex-m1 
cortex-m3 cortex-m4 cortex-r4 cortex-r4f cortex-r5 cortex-r7 ep9312 fa526 fa606te fa626 fa626te fa726te 
fmp626 generic-armv7-a iwmmxt iwmmxt2 marvell-pj4 mpcore mpcorenovfp native strongarm strongarm110 strongarm1100 strongarm1110














//Как вызываеться файл DTC
/home/kosta/bso_ltib/linux-socfpga/scripts/dtc/dtc -I dts -O dtb -o /home/pelengator/workspace/dtbimage.bin ./socfpga_arria5_furia.dts
socfpga_arria5_furia_pelengator.dts->   socfpga_arria5.dtsi ->   socfpga.dtsi->   skeleton.dtsi.




//*/////////////////////////////////////Создание Файловой Системы для UBIfs ,JFFS2 ext2 для //////////////*/////////////

//Создаём файловую систему ext2
http://free-electrons.com/blog/creating-flashing-ubi-ubifs-images/
http://www.linux-mtd.infradead.org/faq/ubifs.html

http://free-electrons.com/blog/managing-flash-storage-with-linux/
http://comments.gmane.org/gmane.linux.drivers.mtd/35421

https://blackfin.uclinux.org/doku.php?id=linux-kernel:ubifs
http://processors.wiki.ti.com/index.php/UBIFS_Support

http://www.linux-mtd.infradead.org/doc/ubifs.html
http://www.2net.co.uk/downloads/ESC-5.4-flash_filesystems-slides.pdf


http://processors.wiki.ti.com/index.php/Creating_a_Root_File_System_for_Linux_on_OMAP35x

major minor  #blocks  name

  31        0        256 mtdblock0
  31        1        264 mtdblock1
  31        2        960 mtdblock2
  31        3      12288 mtdblock3
  31        4      24576 mtdblock4

//////////////////////////////////////////////////
  31        0        256 mtd0
  31        1        264 mtd1
  31        2        960 mtd2
  31        3      12288 mtd3
  31        4      24576 mtd4


//Создаём файловую систему jffs2
В ядре Linux

Device Drivers   --->
  Memory Technology Device(MTD) support  --->
    UBI - Unsorted block images --->
      <*> Enable UBI
      <*> MTD devices emulation driver(gluebi)(NEW)
File systems   --->
  Miscellaneous filesystems  --->
    <*> UBIFS file system support



//Создаём файловую систему ubifs
mkfs.ubifs /dev/mtdblock4

crw-rw----    1 root     root      249,   1 Jan  1 00:22 ubi0_0


mdev -s
ubiattach -p /dev/mtd4
mdev -s
mount -t ubifs ubi0:pelengator  /mnt/f1p0/



UBIFS: default file-system created
UBIFS: background thread "ubifs_bgt0_0" started, PID 147
UBIFS: mounted UBI device 0, volume 0, name "pelengator"
UBIFS: LEB size: 65408 bytes (63 KiB), min./max. I/O unit sizes: 8 bytes/256 bytes
UBIFS: FS size: 16155776 bytes (15 MiB, 247 LEBs), journal size 784896 bytes (0 MiB, 12 LEBs)
UBIFS: reserved for root: 763076 bytes (745 KiB)
UBIFS: media format: w4/r0 (latest is w4/r0), UUID 56A15EDE-2925-4535-B723-0ECB15B1CA09, small LPT model



//монтируем jffs2
mount -t jffs2 mtdblock1 /mnt/f1p0
umount -t jffs2 mtdblock1 /mnt/f1p0
для автоматического монтирования мы должны добавить файл что монтируем в файл fstab
/dev/mtdblock1  /mnt/f1p0   jffs2  rw  0,0

mount /dev/mmcblk0p2 /mnt/rwfs
//Пакеты установленные на вычислителе   Что мы видим на вычислителе  FURY2.1 загрузили его

procps-ng version 3.3.3
htop 1.0.1 - (C) 2004-2011 Hisham Muhammad
OpenSSH_6.0p1 Debian-4+deb7u2, OpenSSL 1.0.1e 11 Feb 2013
procps-ng version 3.3.3
net-tools 1.60
ifconfig 1.42 (2001-04-13)
GNU Midnight Commander 4.8.3
mkfs (util-linux 2.20.1)
gdb server 7.4.1
-------------------------------------------------------------------
GNU Midnight Commander 4.8.3
Built with GLib 2.32.4
Using the S-Lang library with terminfo database
With builtin Editor
With subshell support as default
With support for background operations
With mouse support on xterm and Linux console
With support for X11 events
With internationalization support
With multiple codepages support
Virtual File Systems: cpiofs, tarfs, sfs, extfs, ext2undelfs, ftpfs, fish
Data types: char: 8; int: 32; long: 32; void *: 32; size_t: 32; off_t: 64;
-----------------------------------------------------------------------------

GNU bash, version 4.2.37(1)-release (arm-unknown-linux-gnueabihf)

//////////////////////////////////////////////////////
scp /lib root@<192.168.130.128>:/TMP/FURY
arm_socfpga
scp * root@192.168.130.128:/TMP/SSH






scp /etc/ssh/* root@192.168.130.128:/TMP/SSH





////////////////////////////////Контрольные суммы для дополнительных библиотек///////////////
MD5(mc-4.6.1.tar.gz)= 18b20db6e40480a53bac2870c56fc3c4
MD5(ncurses-5.9.tar.gz)= 8cb9c412e5f2d96bc6f459aa8c6282a1
MD5(ncurses-5.7.tar.gz)= cce05daf61a64501ef6cd8da1f727ec6


MD5(gdb-7.4.1.tar.gz)= 5fb7fca9ef7a9e3cfee0e2f2c0e52051
MD5(gdb-7.3.1.tar.gz)= c2795d636a9481d022608cab201be613

MD5(termcap-1.3.1.tar.gz)= ffe6f86e63a3a29fa53ac645faaabdfa


//////////////////////////////////////////Попытка Сборки NCURSES 5.8//////////////////////
export BUILDMACH=i686-pc-linux-gnu
export TARGETMACH=arm-none-linux-gnueabihf
export AS=${CROSS}as
export LD=${CROSS}ld
export CC=${CROSS}gcc
export CROSS=arm-linux-gnueabihf-
export PATH=$PATH:/opt/ti/gcc-linaro-arm-linux-gnueabihf-4.8-2014.04_linux/bin

./configure --host=$TARGETMACH --prefix=/home/pelengator/ncurses --with-shared --without-debug --without-ada --enable-overwrite --enable-widec
./configure --host=$TARGETMACH --prefix=/opt/freescale/rootfs/arm --with-shared --without-debug -without-cxx-binding  --without-ada --enable-overwrite --enable-widec --disable-db-install                                              




///////////////////////////////////////Попытка сборки GLIBC ПУТЬ к GLIB_CONFIg


*** The glib-config script installed by GLIB could not be found
*** If GLIB was installed in PREFIX, make sure PREFIX/bin is in
*** your path, or set the GLIB_CONFIG environment variable to the
*** full path to glib-config.
configure: error: Test for glib failed.
GNU Midnight Commander requires glib 1.2.6 or above


Support for compiling GLIBC for ARM GNU/Linux (arm-none-linux-gnueabi)
is provided by the ports add-on.

You need to download the ports tarball, unpack it, and symlink it into
your glibc directory as "ports".

Then enable it (and NPTL) with the configuration option
`--enable-add-ons=nptl,ports`.

That should get you started.

If you are cross-compiling you should set --build, --host and --target
appropriately.

../configure --target=arm-none-linux-gnueabihf --prefix=/opt/ti/tools --with-headers=/opt/ti/tools/include --enable-add-ons --enable-kernel=3.10.37 libc_cv_forced_unwind=yes libc_cv_c_cleanup=yes --disable-profile --host=arm-linux-gnueabihf

http://wiki.emacinc.com/wiki/Loading_Images_onto_eMMC_Devices
///////////////////Хлам////////////////////////
mount /dev/mmcblk0p2 /mnt/rwfs


/home/kosta/bso_ltib/linux-3.14.26-g2489c02/scripts/dtc/dtc -I dts -O dtb -o /home/pelengator/workspace/am335x-boneblack.dtb ./am335x-boneblack.dts
Затычки для файловой системы.
-создаём папку /rootfs/lib/firmware
cat /proc/partitions
 179        0    3833856 mmcblk0
 179       16       1024 mmcblk0boot1
 179        8       1024 mmcblk0boot0

Linux version 3.14.26-g2489c02 (gtbldadm@ubuntu-12) (gcc version 4.7.3 20130226 (prerelease) (crosstool-NG linaro-1.13.1-4.7-2013.03-20130313 - Linaro GCC 2013.03) ) #1 Fri Apr 10 14:59:04 EDT 2015


tftp  -g -r   /boc/bco/uImage 192.168.130.128


/home/kosta/bso_ltib/linux-3.14.26-g2489c02/drivers/mmc/host

        Device Boot      Start         End      Blocks   Id  System
/dev/mmcblk0p1   *        2048      264191      131072    b  W95 FAT32


sudo apt-get install curl












Установка CROSS_TOOLS


/usr/lib/arm-linux-gnueabihf

sudo apt-get install qemu-user-static
apt-get install libicu-dev:armhf
arm-linux-gnueabihf-g++ test.cpp -o test
sudo apt-get install crossbuild-essential-armhf
sudo apt-get update
sudo dpkg --add-architecture armhf
curl http://emdebian.org/tools/debian/emdebian-toolchain-archive.key | sudo apt-key add -
sudo apt-get install build-essential
sudo apt-get install curl
apt-get install sudo











